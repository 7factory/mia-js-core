var Shared = require('mia-js-core/node_modules/shared')
    , Utils = require('mia-js-core/node_modules/utils')
    , Q = require("q");

function thisModule() {
    /**
     * Get a cache key from memcache and sets response of func as value of key if cache key does not exists
     * @param identifier
     * @param lifetime
     * @param func
     * @returns {promise.promise|jQuery.promise|d.promise|promise|Q.promise|jQuery.ready.promise|*}
     */
    var cached = function (identifier, lifetime, func) {
        var deferred = Q.defer();
        var memcached = Shared.memcached();
        memcached.get(identifier, function (err, value) {
            if (err) {
                func().then(function (result) {
                    deferred.resolve({cached: false, value: result});
                }).fail(function (err) {
                    deferred.reject(err);
                }).done();
            }
            else if (_.isUndefined(value)) {
                func().then(function (result) {
                    memcached.set(identifier, result, lifetime, function (err) {
                    });
                    deferred.resolve({cached: false, value: result});
                }).fail(function (err) {
                    deferred.reject(err);
                }).done();
            }
            else {
                // Cache identifier exists return value
                deferred.resolve({cached: true, value: value});
            }
        });
        return deferred.promise;
    };

    return cached;
}


module.exports = thisModule();
