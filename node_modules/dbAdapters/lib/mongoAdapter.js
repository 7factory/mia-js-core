/**
 *  Adapter for mongoDB
 */

var Mongo = require('mongodb');
var Async = require('async');
var Utils = require('mia-js-core/node_modules/utils');
var Shared = require("mia-js-core/node_modules/shared");
var Logger = require('mia-js-core/node_modules/logger');
var Util = require('util');
var EventEmitter = require('events').EventEmitter;

module.exports = function () {
    var self = this;
    var _dbs = {};
    var _defaultCallback = function () {
    };

    var _requiredSetting = function (dbName, settingSubpath) {
        return _getSetting(dbName, settingSubpath, true);
    };

    var _optionalSetting = function (dbName, settingSubpath) {
        return _getSetting(dbName, settingSubpath, false);
    };

    var _getSetting = function (dbName, settingSubpath, isRequired) {
        if (!String.isEmpty(settingSubpath)) {
            settingSubpath = '.' + settingSubpath;
        }
        var settingPath = 'environment.mongoDatabases.' + dbName + settingSubpath;
        var settingValue = Shared.config(settingPath);
        if (isRequired && !settingValue) {
            throw new Error("Setting " + settingPath + " is missing for mongo database '" + dbName);
        }
        else {
            return settingValue;
        }
    };

    var _required = function (dbName, name, value) {
        if (_.isEmpty(value)) {
            throw new Error("Setting " + name + " is missing for mongo database '" + dbName);
        }
        else {
            return value;
        }
    };

    var _getDb = function (dbName, callback) {
        dbName = dbName || Shared.config("environment.defaultMongoDatabase");
        callback = callback || _defaultCallback;

    };

    self.connect = function (dbName, callback) {
        var self = this;
        dbName = dbName || Shared.config("environment.defaultMongoDatabase");
        callback = callback || _defaultCallback;

        var breakExec = {};
        Async.waterfall([
            function (next) {
                var dbEntry = _dbs[dbName];
                if (dbEntry) {
                    if (dbEntry.initialized) {
                        next(breakExec, dbEntry.db);
                    }
                    else {
                        dbEntry.emitter.on('initialized', function () {
                            next(breakExec, dbEntry.db);
                        });
                    }
                }
                else {
                    //create new db connection object
                    var serverConfig;
                    var options = _optionalSetting(dbName, "options")
                    try {
                        var servers = _requiredSetting(dbName, "servers");
                        // Connect to mongodb as single connection or repli
                        if (_.isArray(servers)) {
                            // Repli
                            var repl = [];
                            for (var index in servers) {
                                // Single
                                if (!servers[index].port) {
                                    servers[index].port = 27017;
                                }
                                repl.push(new Mongo.Server(
                                    _required(dbName, "host", servers[index].host),
                                    servers[index].port,
                                    servers[index].options
                                ));
                            }
                            serverConfig = new Mongo.ReplSetServers(repl);

                            // Set to readPrefernce to SECONDARY by default in repli mode
                            if (!options.readPreferences || _.isEmpty(options.readPreferences)) {
                                options.readPreference = "ReadPreference.SECONDARY"
                            }
                        }
                        else {
                            // Single
                            if (!servers.port) {
                                servers.port = 27017;
                            }
                            serverConfig = new Mongo.Server(
                                _required(dbName, "host", servers.host),
                                servers.port,
                                servers.options
                            );
                        }

                        db = new Mongo.Db(
                            _requiredSetting(dbName, "dbName"),
                            serverConfig,
                            options
                        );

                        _dbs[dbName] = {
                            'db': db,
                            'emitter': new EventEmitter(),
                            'initialized': false
                        };
                    }
                    catch (err) {
                        next(err);
                        return;
                    }

                    next(null, db);
                }
            },
            function (db, next) {
                db.open(next);
            },
            function (db, next) {
                var userName = _optionalSetting(dbName, "user");
                var password = _optionalSetting(dbName, "password");
                if (userName) {
                    db.authenticate(userName, password,
                        function (err, result) {
                            if (err) {
                                next(err);
                            }
                            else if (!result) {
                                next("Authentication was not possible for '" + dbName + "' with '" + userName + ":" + password + "'");
                            }
                            else {
                                next(null, db);
                            }
                        });
                }
                else {
                    next(null, db);
                }
            },
            function (db, next) {
                _dbs[dbName].emitter.emit('initialized');
                _dbs[dbName].initialized = true;
                next(null, db);
            }
        ], function (err, db) {
            if (err && err != breakExec) {
                errInfo = Util.inspect(err, {showHidden: false, depth: null});
                Logger('err', "Could not connect to database '" + dbName + "'. Extended error information: " + errInfo);
                callback(err);
            }
            else {
                callback(null, db);
            }
        });
    };

    self.close = function (dbName, callback) {
        var self = this;
        dbName = dbName || Shared.config("environment.defaultMongoDatabase");
        callback = callback || _defaultCallback;

        Async.waterfall([
            function (next) {
                self.getDb(dbName, next);
            },
            function (db, next) {
                db.close(next);
            },
            function (result, next) {
                next(null, result);
            }
        ], function (err) {
            if (err) {
                callback(err);
            }
        });
    };

    return self;
};