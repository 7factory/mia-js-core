/**
 * Custom logging function like console.log
 * @param app
 * @returns {module}
 */

var _ = require('lodash');
var Shared = require('mia-js-core/node_modules/shared');
var Util = require('util');
var LogModel = require('./logModel.js');

function thisModule() {
    debugLevel = 'info';
    writeLevel = 'err';
    crashlyticsLevel = 'crash';

    /**
     * Write logging information
     * @param options, this parameter is options and can contain the following params: level=crash,err,warn,info; type=request, internal
     * @param message, log message.
     */
    var log = function (options, message) {

        var level = 'info'
            , type = 'default'
            , levels = ['crash', 'err', 'warn', 'info'];

        if (message && options) {
            if (_.isString(options)) {
                level = options;
                type = 'internal';
            }
            else {

                //Set options
                if (_.isObject(options)) {

                    if (options.level) {
                        level = options.level;
                    }
                    if (options.type) {
                        type = options.type;
                    }
                }
            }
        }
        else {
            if (options && !message) {
                message = options;
            }
            else {
                level = 'err';
                message = 'Logger error empty logger message';
            }
        }

        level = level.toLowerCase();

        //Output
        if (levels.indexOf(level) <= levels.indexOf(debugLevel)) {

            if (type == 'request') {
                if (LogModel) {
                    if (_.isString(message))
                    {
                        message={
                            message: message
                        };
                    }
                    LogModel.insertOne(message, {validate: false});
                }
            }
            else {
                if (!_.isString(message)) {
                    message = Util.inspect(message, {showHidden: false, depth: null});
                }
                console.log(level + ': ' + message);
            }


        }
    };
    return log;
};

module.exports = thisModule();